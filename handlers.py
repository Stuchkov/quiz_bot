from aiogram import types, Router, F
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import re

from config import DB_NAME
from database import get_quiz_state, update_quiz_state, save_quiz_result, get_leaderboard
from quiz_data import quiz_data
from quiz_logic import generate_options_keyboard


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ Markdown –≤ —Å—Ç—Ä–æ–∫–µ
def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown."""
    # –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª \ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∏–∑ –Ω–∏—Ö
    return re.sub(r'([_*[\]()~`>#+-=|{}.!])', r'\\\1', text)


async def get_question(message: types.Message, user_id: int, username: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index, score = await get_quiz_state(DB_NAME, user_id)
    
    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    if current_question_index >= len(quiz_data):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await save_quiz_result(DB_NAME, user_id, username, score)
        await message.answer(f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score}/{len(quiz_data)}.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question_data = quiz_data[current_question_index]
    correct_option = question_data['correct_option']
    options = question_data['options']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = generate_options_keyboard(options, options[correct_option])
    
    await message.answer(
        f"{question_data['question']}",
        reply_markup=keyboard
    )


async def new_quiz(message: types.Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_quiz_state(DB_NAME, user_id, 0, 0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await get_question(message, user_id, username)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="/stats"))
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz –∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É".
    """
    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(F.text == "/stats")
@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats.
    –í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.
    """
    leaderboard = await get_leaderboard(DB_NAME)
    if not leaderboard:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å—ã–≥—Ä–∞–µ—Ç!")
        return

    stats_text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤** üèÜ\n\n"
    for i, (username, score) in enumerate(leaderboard):
        escaped_username = escape_markdown(username)
        stats_text += f"{i+1}. @{escaped_username}: {score} –æ—á–∫–æ–≤\n"
    
    await message.answer(stats_text, parse_mode='Markdown')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
@router.callback_query(F.data == "right_answer")
async def right_answer(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    """
    current_question_index, current_score = await get_quiz_state(DB_NAME, callback.from_user.id)
    question_data = quiz_data[current_question_index]
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç: {question_data['options'][question_data['correct_option']]}\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question_data['question']}"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å—á–µ—Ç
    await update_quiz_state(DB_NAME, callback.from_user.id, current_question_index + 1, current_score + 1)
    await get_question(callback.message, callback.from_user.id, callback.from_user.username)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
@router.callback_query(F.data == "wrong_answer")
async def wrong_answer(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
    """
    current_question_index, current_score = await get_quiz_state(DB_NAME, callback.from_user.id)
    question_data = quiz_data[current_question_index]
    correct_option = question_data['correct_option']
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question_data['question']}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    await update_quiz_state(DB_NAME, callback.from_user.id, current_question_index + 1, current_score)
    await get_question(callback.message, callback.from_user.id, callback.from_user.username)